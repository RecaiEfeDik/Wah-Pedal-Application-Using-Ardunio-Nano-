
ELE362_Proje.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00000ad6  00000b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001c6  008001c6  00000c30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9e  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7e  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091f  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000031e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dc  00000000  00000000  000033d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000563  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003e13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3c       	cpi	r26, 0xC6	; 198
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 ec       	ldi	r26, 0xC6	; 198
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3c       	cpi	r26, 0xCA	; 202
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  9e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ExternalADC_read>:


#include "ADC.h"


int ExternalADC_read(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	lcs();  
  aa:	0e 94 f5 01 	call	0x3ea	; 0x3ea <lcs>
	
	SPI_transfer(0x06);
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_transfer>

	uint8_t exadch = SPI_transfer(0x00);
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_transfer>
  ba:	d8 2f       	mov	r29, r24

	uint8_t exadcl   = SPI_transfer(0x00);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_transfer>
  c2:	c8 2f       	mov	r28, r24

	hcs();
  c4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <hcs>

	
	return ((int)(exadch & 0x0F) << 8) | (int)exadcl;
  c8:	df 70       	andi	r29, 0x0F	; 15
  ca:	8c 2f       	mov	r24, r28
  cc:	90 e0       	ldi	r25, 0x00	; 0
}
  ce:	9d 2b       	or	r25, r29
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <ADC_init>:

void ADC_init()
{
	DDRC = 0x00;
  d6:	17 b8       	out	0x07, r1	; 7
	// ADC SETTINGS
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); // F_adc = 125kHz
  d8:	aa e7       	ldi	r26, 0x7A	; 122
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	8c 91       	ld	r24, X
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1);
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); // Vref = Vcc
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR); // Adjust left
  f2:	80 81       	ld	r24, Z
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // ADC enable
  f8:	8c 91       	ld	r24, X
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	8c 93       	st	X, r24
	ADMUX &= 0xF0; // Reset MUX
  fe:	80 81       	ld	r24, Z
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX0); // Selected channel ADC1
 104:	80 81       	ld	r24, Z
 106:	81 60       	ori	r24, 0x01	; 1
 108:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // First conversion
 10a:	8c 91       	ld	r24, X
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	81 ee       	ldi	r24, 0xE1	; 225
 114:	94 e0       	ldi	r25, 0x04	; 4
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <ADC_init+0x40>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <ADC_init+0x4a>
 120:	00 00       	nop
 122:	08 95       	ret

00000124 <ADC_read>:

uint8_t ADC_read()
{
	uint8_t adch = 0;
	uint8_t data = 0;
	ADCSRA = (1<<ADSC);
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	while(~ADCSRA & (1<<ADIF));
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	84 ff       	sbrs	r24, 4
 132:	fd cf       	rjmp	.-6      	; 0x12e <ADC_read+0xa>
	adch = ADCH;
 134:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	data = adch >> 5;
	return data;
	
 138:	82 95       	swap	r24
 13a:	86 95       	lsr	r24
 13c:	87 70       	andi	r24, 0x07	; 7
 13e:	08 95       	ret

00000140 <insert_and_shift>:
	{0.0956, 0, -0.0956}
};


float* insert_and_shift(float input, float* x)
{
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	6b 01       	movw	r12, r22
 14e:	7c 01       	movw	r14, r24
 150:	ea 01       	movw	r28, r20
	float* output = (float*)malloc(sizeof(float) * 3);
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 48 04 	call	0x890	; 0x890 <malloc>
	output[0] = input;
 15a:	fc 01       	movw	r30, r24
 15c:	c0 82       	st	Z, r12
 15e:	d1 82       	std	Z+1, r13	; 0x01
 160:	e2 82       	std	Z+2, r14	; 0x02
 162:	f3 82       	std	Z+3, r15	; 0x03
	for(uint8_t i=0; i<2; i++)
		output[i+1] = x[i];
 164:	48 81       	ld	r20, Y
 166:	59 81       	ldd	r21, Y+1	; 0x01
 168:	6a 81       	ldd	r22, Y+2	; 0x02
 16a:	7b 81       	ldd	r23, Y+3	; 0x03
 16c:	44 83       	std	Z+4, r20	; 0x04
 16e:	55 83       	std	Z+5, r21	; 0x05
 170:	66 83       	std	Z+6, r22	; 0x06
 172:	77 83       	std	Z+7, r23	; 0x07
 174:	4c 81       	ldd	r20, Y+4	; 0x04
 176:	5d 81       	ldd	r21, Y+5	; 0x05
 178:	6e 81       	ldd	r22, Y+6	; 0x06
 17a:	7f 81       	ldd	r23, Y+7	; 0x07
 17c:	40 87       	std	Z+8, r20	; 0x08
 17e:	51 87       	std	Z+9, r21	; 0x09
 180:	62 87       	std	Z+10, r22	; 0x0a
 182:	73 87       	std	Z+11, r23	; 0x0b
		
	return output;
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	cf 90       	pop	r12
 190:	08 95       	ret

00000192 <calculate_output>:

float calculate_output(float* x, float* y, uint8_t filter_index)
{
 192:	2f 92       	push	r2
 194:	3f 92       	push	r3
 196:	4f 92       	push	r4
 198:	5f 92       	push	r5
 19a:	6f 92       	push	r6
 19c:	7f 92       	push	r7
 19e:	8f 92       	push	r8
 1a0:	9f 92       	push	r9
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	fc 01       	movw	r30, r24
	float y_n = b_array[filter_index][0]*x[0] + b_array[filter_index][1]*x[1] + + b_array[filter_index][2]*x[2] - a_array[filter_index][1]*x[1] + - a_array[filter_index][2]*x[2];
 1b8:	c4 2f       	mov	r28, r20
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	84 80       	ldd	r8, Z+4	; 0x04
 1be:	95 80       	ldd	r9, Z+5	; 0x05
 1c0:	a6 80       	ldd	r10, Z+6	; 0x06
 1c2:	b7 80       	ldd	r11, Z+7	; 0x07
 1c4:	c0 84       	ldd	r12, Z+8	; 0x08
 1c6:	d1 84       	ldd	r13, Z+9	; 0x09
 1c8:	e2 84       	ldd	r14, Z+10	; 0x0a
 1ca:	f3 84       	ldd	r15, Z+11	; 0x0b
 1cc:	1e 01       	movw	r2, r28
 1ce:	22 0c       	add	r2, r2
 1d0:	33 1c       	adc	r3, r3
 1d2:	81 01       	movw	r16, r2
 1d4:	0c 0f       	add	r16, r28
 1d6:	1d 1f       	adc	r17, r29
 1d8:	00 0f       	add	r16, r16
 1da:	11 1f       	adc	r17, r17
 1dc:	00 0f       	add	r16, r16
 1de:	11 1f       	adc	r17, r17
 1e0:	0a 5f       	subi	r16, 0xFA	; 250
 1e2:	1e 4f       	sbci	r17, 0xFE	; 254
	return y_n; 
 1e4:	20 81       	ld	r18, Z
 1e6:	31 81       	ldd	r19, Z+1	; 0x01
 1e8:	42 81       	ldd	r20, Z+2	; 0x02
 1ea:	53 81       	ldd	r21, Z+3	; 0x03
 1ec:	f8 01       	movw	r30, r16
 1ee:	60 81       	ld	r22, Z
 1f0:	71 81       	ldd	r23, Z+1	; 0x01
 1f2:	82 81       	ldd	r24, Z+2	; 0x02
 1f4:	93 81       	ldd	r25, Z+3	; 0x03
 1f6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3>
 1fa:	2b 01       	movw	r4, r22
 1fc:	3c 01       	movw	r6, r24
 1fe:	f8 01       	movw	r30, r16
 200:	24 81       	ldd	r18, Z+4	; 0x04
 202:	35 81       	ldd	r19, Z+5	; 0x05
 204:	46 81       	ldd	r20, Z+6	; 0x06
 206:	57 81       	ldd	r21, Z+7	; 0x07
 208:	c5 01       	movw	r24, r10
 20a:	b4 01       	movw	r22, r8
 20c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3>
 210:	9b 01       	movw	r18, r22
 212:	ac 01       	movw	r20, r24
 214:	c3 01       	movw	r24, r6
 216:	b2 01       	movw	r22, r4
 218:	0e 94 39 02 	call	0x472	; 0x472 <__addsf3>
 21c:	2b 01       	movw	r4, r22
 21e:	3c 01       	movw	r6, r24
 220:	f8 01       	movw	r30, r16
 222:	20 85       	ldd	r18, Z+8	; 0x08
 224:	31 85       	ldd	r19, Z+9	; 0x09
 226:	42 85       	ldd	r20, Z+10	; 0x0a
 228:	53 85       	ldd	r21, Z+11	; 0x0b
 22a:	c7 01       	movw	r24, r14
 22c:	b6 01       	movw	r22, r12
 22e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3>
 232:	9b 01       	movw	r18, r22
 234:	ac 01       	movw	r20, r24
 236:	c3 01       	movw	r24, r6
 238:	b2 01       	movw	r22, r4
 23a:	0e 94 39 02 	call	0x472	; 0x472 <__addsf3>
 23e:	2b 01       	movw	r4, r22
 240:	3c 01       	movw	r6, r24
	return output;
}

float calculate_output(float* x, float* y, uint8_t filter_index)
{
	float y_n = b_array[filter_index][0]*x[0] + b_array[filter_index][1]*x[1] + + b_array[filter_index][2]*x[2] - a_array[filter_index][1]*x[1] + - a_array[filter_index][2]*x[2];
 242:	f1 01       	movw	r30, r2
 244:	ec 0f       	add	r30, r28
 246:	fd 1f       	adc	r31, r29
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	ea 59       	subi	r30, 0x9A	; 154
 252:	fe 4f       	sbci	r31, 0xFE	; 254
	return y_n; 
 254:	24 81       	ldd	r18, Z+4	; 0x04
 256:	35 81       	ldd	r19, Z+5	; 0x05
 258:	46 81       	ldd	r20, Z+6	; 0x06
 25a:	57 81       	ldd	r21, Z+7	; 0x07
 25c:	c5 01       	movw	r24, r10
 25e:	b4 01       	movw	r22, r8
 260:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3>
 264:	9b 01       	movw	r18, r22
 266:	ac 01       	movw	r20, r24
 268:	c3 01       	movw	r24, r6
 26a:	b2 01       	movw	r22, r4
 26c:	0e 94 38 02 	call	0x470	; 0x470 <__subsf3>
 270:	4b 01       	movw	r8, r22
 272:	5c 01       	movw	r10, r24
	return output;
}

float calculate_output(float* x, float* y, uint8_t filter_index)
{
	float y_n = b_array[filter_index][0]*x[0] + b_array[filter_index][1]*x[1] + + b_array[filter_index][2]*x[2] - a_array[filter_index][1]*x[1] + - a_array[filter_index][2]*x[2];
 274:	c2 0d       	add	r28, r2
 276:	d3 1d       	adc	r29, r3
 278:	cc 0f       	add	r28, r28
 27a:	dd 1f       	adc	r29, r29
 27c:	cc 0f       	add	r28, r28
 27e:	dd 1f       	adc	r29, r29
 280:	ca 59       	subi	r28, 0x9A	; 154
 282:	de 4f       	sbci	r29, 0xFE	; 254
	return y_n; 
 284:	88 85       	ldd	r24, Y+8	; 0x08
 286:	99 85       	ldd	r25, Y+9	; 0x09
 288:	aa 85       	ldd	r26, Y+10	; 0x0a
 28a:	bb 85       	ldd	r27, Y+11	; 0x0b
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	90 58       	subi	r25, 0x80	; 128
 292:	a7 01       	movw	r20, r14
 294:	96 01       	movw	r18, r12
 296:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3>
 29a:	9b 01       	movw	r18, r22
 29c:	ac 01       	movw	r20, r24
 29e:	c5 01       	movw	r24, r10
 2a0:	b4 01       	movw	r22, r8
 2a2:	0e 94 39 02 	call	0x472	; 0x472 <__addsf3>
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	df 90       	pop	r13
 2b4:	cf 90       	pop	r12
 2b6:	bf 90       	pop	r11
 2b8:	af 90       	pop	r10
 2ba:	9f 90       	pop	r9
 2bc:	8f 90       	pop	r8
 2be:	7f 90       	pop	r7
 2c0:	6f 90       	pop	r6
 2c2:	5f 90       	pop	r5
 2c4:	4f 90       	pop	r4
 2c6:	3f 90       	pop	r3
 2c8:	2f 90       	pop	r2
 2ca:	08 95       	ret

000002cc <main>:
#include "Timer.h"

int main(void)
{
	
	UART_init();
 2cc:	0e 94 17 02 	call	0x42e	; 0x42e <UART_init>
	SPI_init();
 2d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SPI_init>
	ADC_init();
 2d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_init>
	Timer_init();
 2d8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Timer_init>
	
	float* x_array = (float*)malloc(sizeof(float) * 3);
 2dc:	8c e0       	ldi	r24, 0x0C	; 12
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 48 04 	call	0x890	; 0x890 <malloc>
 2e4:	8c 01       	movw	r16, r24
	float* y_array = (float*)malloc(sizeof(float) * 3);
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 48 04 	call	0x890	; 0x890 <malloc>
 2ee:	d8 2f       	mov	r29, r24
 2f0:	d9 2e       	mov	r13, r25
 2f2:	d8 01       	movw	r26, r16
 2f4:	e8 2f       	mov	r30, r24
 2f6:	f9 2f       	mov	r31, r25
 2f8:	c8 01       	movw	r24, r16
 2fa:	0c 96       	adiw	r24, 0x0c	; 12

	for (uint8_t i=0; i<3; i++)
	{
		x_array[i] = 0.0f;
 2fc:	1d 92       	st	X+, r1
 2fe:	1d 92       	st	X+, r1
 300:	1d 92       	st	X+, r1
 302:	1d 92       	st	X+, r1
		y_array[i] = 0.0f;	
 304:	11 92       	st	Z+, r1
 306:	11 92       	st	Z+, r1
 308:	11 92       	st	Z+, r1
 30a:	11 92       	st	Z+, r1
	Timer_init();
	
	float* x_array = (float*)malloc(sizeof(float) * 3);
	float* y_array = (float*)malloc(sizeof(float) * 3);

	for (uint8_t i=0; i<3; i++)
 30c:	a8 17       	cp	r26, r24
 30e:	b9 07       	cpc	r27, r25
 310:	a9 f7       	brne	.-22     	; 0x2fc <main+0x30>
		
		x_array = insert_and_shift(volts, x_array);
		uint8_t y_n = calculate_output(x_array, y_array, filter_index);
		y_array = insert_and_shift(y_n, y_array);
		
		int output_raw = ((int)(y_n / 3.3) * 1023);
 312:	0f 2e       	mov	r0, r31
 314:	ee 24       	eor	r14, r14
 316:	ea 94       	dec	r14
 318:	f3 e0       	ldi	r31, 0x03	; 3
 31a:	ff 2e       	mov	r15, r31
 31c:	f0 2d       	mov	r31, r0
		
		uint16_t output_ocr = 0;
		
		if (output_raw > 1024)
			output_ocr = 0xFFFF;
 31e:	cc 24       	eor	r12, r12
 320:	ca 94       	dec	r12
		y_array[i] = 0.0f;	
	}

	while (1)
	{
		uint8_t filter_index = ADC_read();
 322:	0e 94 92 00 	call	0x124	; 0x124 <ADC_read>
 326:	c8 2f       	mov	r28, r24
		
		int data = ExternalADC_read();
 328:	0e 94 53 00 	call	0xa6	; 0xa6 <ExternalADC_read>
		float volts = data/1023.0f * 3.3;
		
		x_array = insert_and_shift(volts, x_array);
 32c:	bc 01       	movw	r22, r24
 32e:	99 0f       	add	r25, r25
 330:	88 0b       	sbc	r24, r24
 332:	99 0b       	sbc	r25, r25
 334:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatsisf>
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 ec       	ldi	r19, 0xC0	; 192
 33c:	4f e7       	ldi	r20, 0x7F	; 127
 33e:	54 e4       	ldi	r21, 0x44	; 68
 340:	0e 94 a5 02 	call	0x54a	; 0x54a <__divsf3>
 344:	23 e3       	ldi	r18, 0x33	; 51
 346:	33 e3       	ldi	r19, 0x33	; 51
 348:	43 e5       	ldi	r20, 0x53	; 83
 34a:	50 e4       	ldi	r21, 0x40	; 64
 34c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3>
 350:	a8 01       	movw	r20, r16
 352:	0e 94 a0 00 	call	0x140	; 0x140 <insert_and_shift>
 356:	8c 01       	movw	r16, r24
		uint8_t y_n = calculate_output(x_array, y_array, filter_index);
 358:	4c 2f       	mov	r20, r28
 35a:	6d 2f       	mov	r22, r29
 35c:	7d 2d       	mov	r23, r13
 35e:	0e 94 c9 00 	call	0x192	; 0x192 <calculate_output>
 362:	0e 94 1e 03 	call	0x63c	; 0x63c <__fixunssfsi>
 366:	c6 2f       	mov	r28, r22
		y_array = insert_and_shift(y_n, y_array);
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 4d 03 	call	0x69a	; 0x69a <__floatunsisf>
 372:	4d 2f       	mov	r20, r29
 374:	5d 2d       	mov	r21, r13
 376:	0e 94 a0 00 	call	0x140	; 0x140 <insert_and_shift>
 37a:	d8 2f       	mov	r29, r24
 37c:	d9 2e       	mov	r13, r25
		
		int output_raw = ((int)(y_n / 3.3) * 1023);
 37e:	6c 2f       	mov	r22, r28
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatsisf>
 38a:	23 e3       	ldi	r18, 0x33	; 51
 38c:	33 e3       	ldi	r19, 0x33	; 51
 38e:	43 e5       	ldi	r20, 0x53	; 83
 390:	50 e4       	ldi	r21, 0x40	; 64
 392:	0e 94 a5 02 	call	0x54a	; 0x54a <__divsf3>
 396:	0e 94 17 03 	call	0x62e	; 0x62e <__fixsfsi>
 39a:	e6 9e       	mul	r14, r22
 39c:	90 01       	movw	r18, r0
 39e:	e7 9e       	mul	r14, r23
 3a0:	30 0d       	add	r19, r0
 3a2:	f6 9e       	mul	r15, r22
 3a4:	30 0d       	add	r19, r0
 3a6:	11 24       	eor	r1, r1
		
		uint16_t output_ocr = 0;
		
		if (output_raw > 1024)
 3a8:	21 30       	cpi	r18, 0x01	; 1
 3aa:	84 e0       	ldi	r24, 0x04	; 4
 3ac:	38 07       	cpc	r19, r24
 3ae:	14 f4       	brge	.+4      	; 0x3b4 <main+0xe8>
			output_ocr = 0xFFFF;
		else
			output_ocr = (uint16_t)(output_raw);
 3b0:	82 2f       	mov	r24, r18
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <main+0xea>
		int output_raw = ((int)(y_n / 3.3) * 1023);
		
		uint16_t output_ocr = 0;
		
		if (output_raw > 1024)
			output_ocr = 0xFFFF;
 3b4:	8c 2d       	mov	r24, r12
		else
			output_ocr = (uint16_t)(output_raw);
		
		OCR_set(output_ocr);
 3b6:	0e 94 11 02 	call	0x422	; 0x422 <OCR_set>
 3ba:	8f e1       	ldi	r24, 0x1F	; 31
 3bc:	9e e4       	ldi	r25, 0x4E	; 78
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0xf2>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0xf8>
 3c4:	00 00       	nop
 3c6:	ad cf       	rjmp	.-166    	; 0x322 <main+0x56>

000003c8 <SPI_init>:

#include "SPI.h"

void SPI_init() {
	
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<CS);
 3c8:	84 b1       	in	r24, 0x04	; 4
 3ca:	8c 62       	ori	r24, 0x2C	; 44
 3cc:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MISO);
 3ce:	24 98       	cbi	0x04, 4	; 4
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 3d0:	81 e5       	ldi	r24, 0x51	; 81
 3d2:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<CS);	
 3d4:	2a 9a       	sbi	0x05, 2	; 5
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	89 e6       	ldi	r24, 0x69	; 105
 3da:	98 e1       	ldi	r25, 0x18	; 24
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <SPI_init+0x14>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <SPI_init+0x1e>
 3e6:	00 00       	nop
 3e8:	08 95       	ret

000003ea <lcs>:
	_delay_ms(500);
}

void lcs(){PORTB &= ~(1<<CS);}
 3ea:	2a 98       	cbi	0x05, 2	; 5
 3ec:	08 95       	ret

000003ee <hcs>:
void hcs(){PORTB |= (1<<CS);}
 3ee:	2a 9a       	sbi	0x05, 2	; 5
 3f0:	08 95       	ret

000003f2 <SPI_transfer>:

// in SPI.h or SPI.c:
uint8_t SPI_transfer(uint8_t data) {
	SPDR = data;                    // start transfer
 3f2:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));  // wait until complete
 3f4:	0d b4       	in	r0, 0x2d	; 45
 3f6:	07 fe       	sbrs	r0, 7
 3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <SPI_transfer+0x2>
	return SPDR;                    // reading SPDR clears SPIF
 3fa:	8e b5       	in	r24, 0x2e	; 46
}
 3fc:	08 95       	ret

000003fe <Timer_init>:

#include "Timer.h"

void Timer_init()
{
	DDRB |= (1<<DDB1);
 3fe:	21 9a       	sbi	0x04, 1	; 4
	TCCR1B |= (1<<WGM12) | (1<<WGM11);
 400:	e1 e8       	ldi	r30, 0x81	; 129
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	8a 60       	ori	r24, 0x0A	; 10
 408:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM10);
 40a:	a0 e8       	ldi	r26, 0x80	; 128
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	8c 91       	ld	r24, X
 410:	81 60       	ori	r24, 0x01	; 1
 412:	8c 93       	st	X, r24
	TCCR1A |= (1<<COM1A1);
 414:	8c 91       	ld	r24, X
 416:	80 68       	ori	r24, 0x80	; 128
 418:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS10);
 41a:	80 81       	ld	r24, Z
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	80 83       	st	Z, r24
 420:	08 95       	ret

00000422 <OCR_set>:
	 
}
void OCR_set(uint8_t ocr)
{
	OCR1A = ocr;
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 428:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 42c:	08 95       	ret

0000042e <UART_init>:
#include "UART.h"

void UART_init()
{

	UBRR0H = 0x00; // (ver2: high/low-byte assignment)
 42e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = 0x67; // 9600 bps baud rate
 432:	87 e6       	ldi	r24, 0x67	; 103
 434:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C &= ~((1<<UMSEL00)|(1<<UMSEL01)); // Async
 438:	e2 ec       	ldi	r30, 0xC2	; 194
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	8f 73       	andi	r24, 0x3F	; 63
 440:	80 83       	st	Z, r24
	UCSR0C &= ~((1<<UPM00)|(1<<UPM01)); // No parity
 442:	80 81       	ld	r24, Z
 444:	8f 7c       	andi	r24, 0xCF	; 207
 446:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<USBS0); // 1 stop bit
 448:	80 81       	ld	r24, Z
 44a:	87 7f       	andi	r24, 0xF7	; 247
 44c:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01); // 8-bit data frame
 44e:	80 81       	ld	r24, Z
 450:	86 60       	ori	r24, 0x06	; 6
 452:	80 83       	st	Z, r24
	UCSR0B &= ~(1<<UCSZ02);
 454:	e1 ec       	ldi	r30, 0xC1	; 193
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	8b 7f       	andi	r24, 0xFB	; 251
 45c:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0); // No 2X
 45e:	a0 ec       	ldi	r26, 0xC0	; 192
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	8c 91       	ld	r24, X
 464:	8d 7f       	andi	r24, 0xFD	; 253
 466:	8c 93       	st	X, r24
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // Enable Tx & Rx
 468:	80 81       	ld	r24, Z
 46a:	88 61       	ori	r24, 0x18	; 24
 46c:	80 83       	st	Z, r24
 46e:	08 95       	ret

00000470 <__subsf3>:
 470:	50 58       	subi	r21, 0x80	; 128

00000472 <__addsf3>:
 472:	bb 27       	eor	r27, r27
 474:	aa 27       	eor	r26, r26
 476:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3x>
 47a:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_round>
 47e:	0e 94 93 03 	call	0x726	; 0x726 <__fp_pscA>
 482:	38 f0       	brcs	.+14     	; 0x492 <__addsf3+0x20>
 484:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_pscB>
 488:	20 f0       	brcs	.+8      	; 0x492 <__addsf3+0x20>
 48a:	39 f4       	brne	.+14     	; 0x49a <__addsf3+0x28>
 48c:	9f 3f       	cpi	r25, 0xFF	; 255
 48e:	19 f4       	brne	.+6      	; 0x496 <__addsf3+0x24>
 490:	26 f4       	brtc	.+8      	; 0x49a <__addsf3+0x28>
 492:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_nan>
 496:	0e f4       	brtc	.+2      	; 0x49a <__addsf3+0x28>
 498:	e0 95       	com	r30
 49a:	e7 fb       	bst	r30, 7
 49c:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_inf>

000004a0 <__addsf3x>:
 4a0:	e9 2f       	mov	r30, r25
 4a2:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_split3>
 4a6:	58 f3       	brcs	.-42     	; 0x47e <__addsf3+0xc>
 4a8:	ba 17       	cp	r27, r26
 4aa:	62 07       	cpc	r22, r18
 4ac:	73 07       	cpc	r23, r19
 4ae:	84 07       	cpc	r24, r20
 4b0:	95 07       	cpc	r25, r21
 4b2:	20 f0       	brcs	.+8      	; 0x4bc <__addsf3x+0x1c>
 4b4:	79 f4       	brne	.+30     	; 0x4d4 <__addsf3x+0x34>
 4b6:	a6 f5       	brtc	.+104    	; 0x520 <__addsf3x+0x80>
 4b8:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_zero>
 4bc:	0e f4       	brtc	.+2      	; 0x4c0 <__addsf3x+0x20>
 4be:	e0 95       	com	r30
 4c0:	0b 2e       	mov	r0, r27
 4c2:	ba 2f       	mov	r27, r26
 4c4:	a0 2d       	mov	r26, r0
 4c6:	0b 01       	movw	r0, r22
 4c8:	b9 01       	movw	r22, r18
 4ca:	90 01       	movw	r18, r0
 4cc:	0c 01       	movw	r0, r24
 4ce:	ca 01       	movw	r24, r20
 4d0:	a0 01       	movw	r20, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	ff 27       	eor	r31, r31
 4d6:	59 1b       	sub	r21, r25
 4d8:	99 f0       	breq	.+38     	; 0x500 <__addsf3x+0x60>
 4da:	59 3f       	cpi	r21, 0xF9	; 249
 4dc:	50 f4       	brcc	.+20     	; 0x4f2 <__addsf3x+0x52>
 4de:	50 3e       	cpi	r21, 0xE0	; 224
 4e0:	68 f1       	brcs	.+90     	; 0x53c <__addsf3x+0x9c>
 4e2:	1a 16       	cp	r1, r26
 4e4:	f0 40       	sbci	r31, 0x00	; 0
 4e6:	a2 2f       	mov	r26, r18
 4e8:	23 2f       	mov	r18, r19
 4ea:	34 2f       	mov	r19, r20
 4ec:	44 27       	eor	r20, r20
 4ee:	58 5f       	subi	r21, 0xF8	; 248
 4f0:	f3 cf       	rjmp	.-26     	; 0x4d8 <__addsf3x+0x38>
 4f2:	46 95       	lsr	r20
 4f4:	37 95       	ror	r19
 4f6:	27 95       	ror	r18
 4f8:	a7 95       	ror	r26
 4fa:	f0 40       	sbci	r31, 0x00	; 0
 4fc:	53 95       	inc	r21
 4fe:	c9 f7       	brne	.-14     	; 0x4f2 <__addsf3x+0x52>
 500:	7e f4       	brtc	.+30     	; 0x520 <__addsf3x+0x80>
 502:	1f 16       	cp	r1, r31
 504:	ba 0b       	sbc	r27, r26
 506:	62 0b       	sbc	r22, r18
 508:	73 0b       	sbc	r23, r19
 50a:	84 0b       	sbc	r24, r20
 50c:	ba f0       	brmi	.+46     	; 0x53c <__addsf3x+0x9c>
 50e:	91 50       	subi	r25, 0x01	; 1
 510:	a1 f0       	breq	.+40     	; 0x53a <__addsf3x+0x9a>
 512:	ff 0f       	add	r31, r31
 514:	bb 1f       	adc	r27, r27
 516:	66 1f       	adc	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	c2 f7       	brpl	.-16     	; 0x50e <__addsf3x+0x6e>
 51e:	0e c0       	rjmp	.+28     	; 0x53c <__addsf3x+0x9c>
 520:	ba 0f       	add	r27, r26
 522:	62 1f       	adc	r22, r18
 524:	73 1f       	adc	r23, r19
 526:	84 1f       	adc	r24, r20
 528:	48 f4       	brcc	.+18     	; 0x53c <__addsf3x+0x9c>
 52a:	87 95       	ror	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b7 95       	ror	r27
 532:	f7 95       	ror	r31
 534:	9e 3f       	cpi	r25, 0xFE	; 254
 536:	08 f0       	brcs	.+2      	; 0x53a <__addsf3x+0x9a>
 538:	b0 cf       	rjmp	.-160    	; 0x49a <__addsf3+0x28>
 53a:	93 95       	inc	r25
 53c:	88 0f       	add	r24, r24
 53e:	08 f0       	brcs	.+2      	; 0x542 <__addsf3x+0xa2>
 540:	99 27       	eor	r25, r25
 542:	ee 0f       	add	r30, r30
 544:	97 95       	ror	r25
 546:	87 95       	ror	r24
 548:	08 95       	ret

0000054a <__divsf3>:
 54a:	0e 94 b9 02 	call	0x572	; 0x572 <__divsf3x>
 54e:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_round>
 552:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_pscB>
 556:	58 f0       	brcs	.+22     	; 0x56e <__divsf3+0x24>
 558:	0e 94 93 03 	call	0x726	; 0x726 <__fp_pscA>
 55c:	40 f0       	brcs	.+16     	; 0x56e <__divsf3+0x24>
 55e:	29 f4       	brne	.+10     	; 0x56a <__divsf3+0x20>
 560:	5f 3f       	cpi	r21, 0xFF	; 255
 562:	29 f0       	breq	.+10     	; 0x56e <__divsf3+0x24>
 564:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_inf>
 568:	51 11       	cpse	r21, r1
 56a:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_szero>
 56e:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_nan>

00000572 <__divsf3x>:
 572:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_split3>
 576:	68 f3       	brcs	.-38     	; 0x552 <__divsf3+0x8>

00000578 <__divsf3_pse>:
 578:	99 23       	and	r25, r25
 57a:	b1 f3       	breq	.-20     	; 0x568 <__divsf3+0x1e>
 57c:	55 23       	and	r21, r21
 57e:	91 f3       	breq	.-28     	; 0x564 <__divsf3+0x1a>
 580:	95 1b       	sub	r25, r21
 582:	55 0b       	sbc	r21, r21
 584:	bb 27       	eor	r27, r27
 586:	aa 27       	eor	r26, r26
 588:	62 17       	cp	r22, r18
 58a:	73 07       	cpc	r23, r19
 58c:	84 07       	cpc	r24, r20
 58e:	38 f0       	brcs	.+14     	; 0x59e <__divsf3_pse+0x26>
 590:	9f 5f       	subi	r25, 0xFF	; 255
 592:	5f 4f       	sbci	r21, 0xFF	; 255
 594:	22 0f       	add	r18, r18
 596:	33 1f       	adc	r19, r19
 598:	44 1f       	adc	r20, r20
 59a:	aa 1f       	adc	r26, r26
 59c:	a9 f3       	breq	.-22     	; 0x588 <__divsf3_pse+0x10>
 59e:	35 d0       	rcall	.+106    	; 0x60a <__divsf3_pse+0x92>
 5a0:	0e 2e       	mov	r0, r30
 5a2:	3a f0       	brmi	.+14     	; 0x5b2 <__divsf3_pse+0x3a>
 5a4:	e0 e8       	ldi	r30, 0x80	; 128
 5a6:	32 d0       	rcall	.+100    	; 0x60c <__divsf3_pse+0x94>
 5a8:	91 50       	subi	r25, 0x01	; 1
 5aa:	50 40       	sbci	r21, 0x00	; 0
 5ac:	e6 95       	lsr	r30
 5ae:	00 1c       	adc	r0, r0
 5b0:	ca f7       	brpl	.-14     	; 0x5a4 <__divsf3_pse+0x2c>
 5b2:	2b d0       	rcall	.+86     	; 0x60a <__divsf3_pse+0x92>
 5b4:	fe 2f       	mov	r31, r30
 5b6:	29 d0       	rcall	.+82     	; 0x60a <__divsf3_pse+0x92>
 5b8:	66 0f       	add	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	88 1f       	adc	r24, r24
 5be:	bb 1f       	adc	r27, r27
 5c0:	26 17       	cp	r18, r22
 5c2:	37 07       	cpc	r19, r23
 5c4:	48 07       	cpc	r20, r24
 5c6:	ab 07       	cpc	r26, r27
 5c8:	b0 e8       	ldi	r27, 0x80	; 128
 5ca:	09 f0       	breq	.+2      	; 0x5ce <__divsf3_pse+0x56>
 5cc:	bb 0b       	sbc	r27, r27
 5ce:	80 2d       	mov	r24, r0
 5d0:	bf 01       	movw	r22, r30
 5d2:	ff 27       	eor	r31, r31
 5d4:	93 58       	subi	r25, 0x83	; 131
 5d6:	5f 4f       	sbci	r21, 0xFF	; 255
 5d8:	3a f0       	brmi	.+14     	; 0x5e8 <__divsf3_pse+0x70>
 5da:	9e 3f       	cpi	r25, 0xFE	; 254
 5dc:	51 05       	cpc	r21, r1
 5de:	78 f0       	brcs	.+30     	; 0x5fe <__divsf3_pse+0x86>
 5e0:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_inf>
 5e4:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_szero>
 5e8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ea:	e4 f3       	brlt	.-8      	; 0x5e4 <__divsf3_pse+0x6c>
 5ec:	98 3e       	cpi	r25, 0xE8	; 232
 5ee:	d4 f3       	brlt	.-12     	; 0x5e4 <__divsf3_pse+0x6c>
 5f0:	86 95       	lsr	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b7 95       	ror	r27
 5f8:	f7 95       	ror	r31
 5fa:	9f 5f       	subi	r25, 0xFF	; 255
 5fc:	c9 f7       	brne	.-14     	; 0x5f0 <__divsf3_pse+0x78>
 5fe:	88 0f       	add	r24, r24
 600:	91 1d       	adc	r25, r1
 602:	96 95       	lsr	r25
 604:	87 95       	ror	r24
 606:	97 f9       	bld	r25, 7
 608:	08 95       	ret
 60a:	e1 e0       	ldi	r30, 0x01	; 1
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	88 1f       	adc	r24, r24
 612:	bb 1f       	adc	r27, r27
 614:	62 17       	cp	r22, r18
 616:	73 07       	cpc	r23, r19
 618:	84 07       	cpc	r24, r20
 61a:	ba 07       	cpc	r27, r26
 61c:	20 f0       	brcs	.+8      	; 0x626 <__divsf3_pse+0xae>
 61e:	62 1b       	sub	r22, r18
 620:	73 0b       	sbc	r23, r19
 622:	84 0b       	sbc	r24, r20
 624:	ba 0b       	sbc	r27, r26
 626:	ee 1f       	adc	r30, r30
 628:	88 f7       	brcc	.-30     	; 0x60c <__divsf3_pse+0x94>
 62a:	e0 95       	com	r30
 62c:	08 95       	ret

0000062e <__fixsfsi>:
 62e:	0e 94 1e 03 	call	0x63c	; 0x63c <__fixunssfsi>
 632:	68 94       	set
 634:	b1 11       	cpse	r27, r1
 636:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_szero>
 63a:	08 95       	ret

0000063c <__fixunssfsi>:
 63c:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_splitA>
 640:	88 f0       	brcs	.+34     	; 0x664 <__fixunssfsi+0x28>
 642:	9f 57       	subi	r25, 0x7F	; 127
 644:	98 f0       	brcs	.+38     	; 0x66c <__fixunssfsi+0x30>
 646:	b9 2f       	mov	r27, r25
 648:	99 27       	eor	r25, r25
 64a:	b7 51       	subi	r27, 0x17	; 23
 64c:	b0 f0       	brcs	.+44     	; 0x67a <__fixunssfsi+0x3e>
 64e:	e1 f0       	breq	.+56     	; 0x688 <__fixunssfsi+0x4c>
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	1a f0       	brmi	.+6      	; 0x660 <__fixunssfsi+0x24>
 65a:	ba 95       	dec	r27
 65c:	c9 f7       	brne	.-14     	; 0x650 <__fixunssfsi+0x14>
 65e:	14 c0       	rjmp	.+40     	; 0x688 <__fixunssfsi+0x4c>
 660:	b1 30       	cpi	r27, 0x01	; 1
 662:	91 f0       	breq	.+36     	; 0x688 <__fixunssfsi+0x4c>
 664:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_zero>
 668:	b1 e0       	ldi	r27, 0x01	; 1
 66a:	08 95       	ret
 66c:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_zero>
 670:	67 2f       	mov	r22, r23
 672:	78 2f       	mov	r23, r24
 674:	88 27       	eor	r24, r24
 676:	b8 5f       	subi	r27, 0xF8	; 248
 678:	39 f0       	breq	.+14     	; 0x688 <__fixunssfsi+0x4c>
 67a:	b9 3f       	cpi	r27, 0xF9	; 249
 67c:	cc f3       	brlt	.-14     	; 0x670 <__fixunssfsi+0x34>
 67e:	86 95       	lsr	r24
 680:	77 95       	ror	r23
 682:	67 95       	ror	r22
 684:	b3 95       	inc	r27
 686:	d9 f7       	brne	.-10     	; 0x67e <__fixunssfsi+0x42>
 688:	3e f4       	brtc	.+14     	; 0x698 <__fixunssfsi+0x5c>
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <__floatunsisf>:
 69a:	e8 94       	clt
 69c:	09 c0       	rjmp	.+18     	; 0x6b0 <__floatsisf+0x12>

0000069e <__floatsisf>:
 69e:	97 fb       	bst	r25, 7
 6a0:	3e f4       	brtc	.+14     	; 0x6b0 <__floatsisf+0x12>
 6a2:	90 95       	com	r25
 6a4:	80 95       	com	r24
 6a6:	70 95       	com	r23
 6a8:	61 95       	neg	r22
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
 6ac:	8f 4f       	sbci	r24, 0xFF	; 255
 6ae:	9f 4f       	sbci	r25, 0xFF	; 255
 6b0:	99 23       	and	r25, r25
 6b2:	a9 f0       	breq	.+42     	; 0x6de <__floatsisf+0x40>
 6b4:	f9 2f       	mov	r31, r25
 6b6:	96 e9       	ldi	r25, 0x96	; 150
 6b8:	bb 27       	eor	r27, r27
 6ba:	93 95       	inc	r25
 6bc:	f6 95       	lsr	r31
 6be:	87 95       	ror	r24
 6c0:	77 95       	ror	r23
 6c2:	67 95       	ror	r22
 6c4:	b7 95       	ror	r27
 6c6:	f1 11       	cpse	r31, r1
 6c8:	f8 cf       	rjmp	.-16     	; 0x6ba <__floatsisf+0x1c>
 6ca:	fa f4       	brpl	.+62     	; 0x70a <__floatsisf+0x6c>
 6cc:	bb 0f       	add	r27, r27
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__floatsisf+0x36>
 6d0:	60 ff       	sbrs	r22, 0
 6d2:	1b c0       	rjmp	.+54     	; 0x70a <__floatsisf+0x6c>
 6d4:	6f 5f       	subi	r22, 0xFF	; 255
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 4f       	sbci	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	16 c0       	rjmp	.+44     	; 0x70a <__floatsisf+0x6c>
 6de:	88 23       	and	r24, r24
 6e0:	11 f0       	breq	.+4      	; 0x6e6 <__floatsisf+0x48>
 6e2:	96 e9       	ldi	r25, 0x96	; 150
 6e4:	11 c0       	rjmp	.+34     	; 0x708 <__floatsisf+0x6a>
 6e6:	77 23       	and	r23, r23
 6e8:	21 f0       	breq	.+8      	; 0x6f2 <__floatsisf+0x54>
 6ea:	9e e8       	ldi	r25, 0x8E	; 142
 6ec:	87 2f       	mov	r24, r23
 6ee:	76 2f       	mov	r23, r22
 6f0:	05 c0       	rjmp	.+10     	; 0x6fc <__floatsisf+0x5e>
 6f2:	66 23       	and	r22, r22
 6f4:	71 f0       	breq	.+28     	; 0x712 <__floatsisf+0x74>
 6f6:	96 e8       	ldi	r25, 0x86	; 134
 6f8:	86 2f       	mov	r24, r22
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	2a f0       	brmi	.+10     	; 0x70a <__floatsisf+0x6c>
 700:	9a 95       	dec	r25
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	da f7       	brpl	.-10     	; 0x700 <__floatsisf+0x62>
 70a:	88 0f       	add	r24, r24
 70c:	96 95       	lsr	r25
 70e:	87 95       	ror	r24
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <__fp_inf>:
 714:	97 f9       	bld	r25, 7
 716:	9f 67       	ori	r25, 0x7F	; 127
 718:	80 e8       	ldi	r24, 0x80	; 128
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	08 95       	ret

00000720 <__fp_nan>:
 720:	9f ef       	ldi	r25, 0xFF	; 255
 722:	80 ec       	ldi	r24, 0xC0	; 192
 724:	08 95       	ret

00000726 <__fp_pscA>:
 726:	00 24       	eor	r0, r0
 728:	0a 94       	dec	r0
 72a:	16 16       	cp	r1, r22
 72c:	17 06       	cpc	r1, r23
 72e:	18 06       	cpc	r1, r24
 730:	09 06       	cpc	r0, r25
 732:	08 95       	ret

00000734 <__fp_pscB>:
 734:	00 24       	eor	r0, r0
 736:	0a 94       	dec	r0
 738:	12 16       	cp	r1, r18
 73a:	13 06       	cpc	r1, r19
 73c:	14 06       	cpc	r1, r20
 73e:	05 06       	cpc	r0, r21
 740:	08 95       	ret

00000742 <__fp_round>:
 742:	09 2e       	mov	r0, r25
 744:	03 94       	inc	r0
 746:	00 0c       	add	r0, r0
 748:	11 f4       	brne	.+4      	; 0x74e <__fp_round+0xc>
 74a:	88 23       	and	r24, r24
 74c:	52 f0       	brmi	.+20     	; 0x762 <__fp_round+0x20>
 74e:	bb 0f       	add	r27, r27
 750:	40 f4       	brcc	.+16     	; 0x762 <__fp_round+0x20>
 752:	bf 2b       	or	r27, r31
 754:	11 f4       	brne	.+4      	; 0x75a <__fp_round+0x18>
 756:	60 ff       	sbrs	r22, 0
 758:	04 c0       	rjmp	.+8      	; 0x762 <__fp_round+0x20>
 75a:	6f 5f       	subi	r22, 0xFF	; 255
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	08 95       	ret

00000764 <__fp_split3>:
 764:	57 fd       	sbrc	r21, 7
 766:	90 58       	subi	r25, 0x80	; 128
 768:	44 0f       	add	r20, r20
 76a:	55 1f       	adc	r21, r21
 76c:	59 f0       	breq	.+22     	; 0x784 <__fp_splitA+0x10>
 76e:	5f 3f       	cpi	r21, 0xFF	; 255
 770:	71 f0       	breq	.+28     	; 0x78e <__fp_splitA+0x1a>
 772:	47 95       	ror	r20

00000774 <__fp_splitA>:
 774:	88 0f       	add	r24, r24
 776:	97 fb       	bst	r25, 7
 778:	99 1f       	adc	r25, r25
 77a:	61 f0       	breq	.+24     	; 0x794 <__fp_splitA+0x20>
 77c:	9f 3f       	cpi	r25, 0xFF	; 255
 77e:	79 f0       	breq	.+30     	; 0x79e <__fp_splitA+0x2a>
 780:	87 95       	ror	r24
 782:	08 95       	ret
 784:	12 16       	cp	r1, r18
 786:	13 06       	cpc	r1, r19
 788:	14 06       	cpc	r1, r20
 78a:	55 1f       	adc	r21, r21
 78c:	f2 cf       	rjmp	.-28     	; 0x772 <__fp_split3+0xe>
 78e:	46 95       	lsr	r20
 790:	f1 df       	rcall	.-30     	; 0x774 <__fp_splitA>
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <__fp_splitA+0x30>
 794:	16 16       	cp	r1, r22
 796:	17 06       	cpc	r1, r23
 798:	18 06       	cpc	r1, r24
 79a:	99 1f       	adc	r25, r25
 79c:	f1 cf       	rjmp	.-30     	; 0x780 <__fp_splitA+0xc>
 79e:	86 95       	lsr	r24
 7a0:	71 05       	cpc	r23, r1
 7a2:	61 05       	cpc	r22, r1
 7a4:	08 94       	sec
 7a6:	08 95       	ret

000007a8 <__fp_zero>:
 7a8:	e8 94       	clt

000007aa <__fp_szero>:
 7aa:	bb 27       	eor	r27, r27
 7ac:	66 27       	eor	r22, r22
 7ae:	77 27       	eor	r23, r23
 7b0:	cb 01       	movw	r24, r22
 7b2:	97 f9       	bld	r25, 7
 7b4:	08 95       	ret

000007b6 <__mulsf3>:
 7b6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__mulsf3x>
 7ba:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_round>
 7be:	0e 94 93 03 	call	0x726	; 0x726 <__fp_pscA>
 7c2:	38 f0       	brcs	.+14     	; 0x7d2 <__mulsf3+0x1c>
 7c4:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_pscB>
 7c8:	20 f0       	brcs	.+8      	; 0x7d2 <__mulsf3+0x1c>
 7ca:	95 23       	and	r25, r21
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <__mulsf3+0x1c>
 7ce:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_inf>
 7d2:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_nan>
 7d6:	11 24       	eor	r1, r1
 7d8:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_szero>

000007dc <__mulsf3x>:
 7dc:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_split3>
 7e0:	70 f3       	brcs	.-36     	; 0x7be <__mulsf3+0x8>

000007e2 <__mulsf3_pse>:
 7e2:	95 9f       	mul	r25, r21
 7e4:	c1 f3       	breq	.-16     	; 0x7d6 <__mulsf3+0x20>
 7e6:	95 0f       	add	r25, r21
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	55 1f       	adc	r21, r21
 7ec:	62 9f       	mul	r22, r18
 7ee:	f0 01       	movw	r30, r0
 7f0:	72 9f       	mul	r23, r18
 7f2:	bb 27       	eor	r27, r27
 7f4:	f0 0d       	add	r31, r0
 7f6:	b1 1d       	adc	r27, r1
 7f8:	63 9f       	mul	r22, r19
 7fa:	aa 27       	eor	r26, r26
 7fc:	f0 0d       	add	r31, r0
 7fe:	b1 1d       	adc	r27, r1
 800:	aa 1f       	adc	r26, r26
 802:	64 9f       	mul	r22, r20
 804:	66 27       	eor	r22, r22
 806:	b0 0d       	add	r27, r0
 808:	a1 1d       	adc	r26, r1
 80a:	66 1f       	adc	r22, r22
 80c:	82 9f       	mul	r24, r18
 80e:	22 27       	eor	r18, r18
 810:	b0 0d       	add	r27, r0
 812:	a1 1d       	adc	r26, r1
 814:	62 1f       	adc	r22, r18
 816:	73 9f       	mul	r23, r19
 818:	b0 0d       	add	r27, r0
 81a:	a1 1d       	adc	r26, r1
 81c:	62 1f       	adc	r22, r18
 81e:	83 9f       	mul	r24, r19
 820:	a0 0d       	add	r26, r0
 822:	61 1d       	adc	r22, r1
 824:	22 1f       	adc	r18, r18
 826:	74 9f       	mul	r23, r20
 828:	33 27       	eor	r19, r19
 82a:	a0 0d       	add	r26, r0
 82c:	61 1d       	adc	r22, r1
 82e:	23 1f       	adc	r18, r19
 830:	84 9f       	mul	r24, r20
 832:	60 0d       	add	r22, r0
 834:	21 1d       	adc	r18, r1
 836:	82 2f       	mov	r24, r18
 838:	76 2f       	mov	r23, r22
 83a:	6a 2f       	mov	r22, r26
 83c:	11 24       	eor	r1, r1
 83e:	9f 57       	subi	r25, 0x7F	; 127
 840:	50 40       	sbci	r21, 0x00	; 0
 842:	9a f0       	brmi	.+38     	; 0x86a <__mulsf3_pse+0x88>
 844:	f1 f0       	breq	.+60     	; 0x882 <__mulsf3_pse+0xa0>
 846:	88 23       	and	r24, r24
 848:	4a f0       	brmi	.+18     	; 0x85c <__mulsf3_pse+0x7a>
 84a:	ee 0f       	add	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	bb 1f       	adc	r27, r27
 850:	66 1f       	adc	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	91 50       	subi	r25, 0x01	; 1
 858:	50 40       	sbci	r21, 0x00	; 0
 85a:	a9 f7       	brne	.-22     	; 0x846 <__mulsf3_pse+0x64>
 85c:	9e 3f       	cpi	r25, 0xFE	; 254
 85e:	51 05       	cpc	r21, r1
 860:	80 f0       	brcs	.+32     	; 0x882 <__mulsf3_pse+0xa0>
 862:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_inf>
 866:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_szero>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	e4 f3       	brlt	.-8      	; 0x866 <__mulsf3_pse+0x84>
 86e:	98 3e       	cpi	r25, 0xE8	; 232
 870:	d4 f3       	brlt	.-12     	; 0x866 <__mulsf3_pse+0x84>
 872:	86 95       	lsr	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	b7 95       	ror	r27
 87a:	f7 95       	ror	r31
 87c:	e7 95       	ror	r30
 87e:	9f 5f       	subi	r25, 0xFF	; 255
 880:	c1 f7       	brne	.-16     	; 0x872 <__mulsf3_pse+0x90>
 882:	fe 2b       	or	r31, r30
 884:	88 0f       	add	r24, r24
 886:	91 1d       	adc	r25, r1
 888:	96 95       	lsr	r25
 88a:	87 95       	ror	r24
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <malloc>:
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	82 30       	cpi	r24, 0x02	; 2
 89a:	91 05       	cpc	r25, r1
 89c:	10 f4       	brcc	.+4      	; 0x8a2 <malloc+0x12>
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <__flp>
 8a6:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <__flp+0x1>
 8aa:	20 e0       	ldi	r18, 0x00	; 0
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	a0 e0       	ldi	r26, 0x00	; 0
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	30 97       	sbiw	r30, 0x00	; 0
 8b4:	19 f1       	breq	.+70     	; 0x8fc <malloc+0x6c>
 8b6:	40 81       	ld	r20, Z
 8b8:	51 81       	ldd	r21, Z+1	; 0x01
 8ba:	02 81       	ldd	r16, Z+2	; 0x02
 8bc:	13 81       	ldd	r17, Z+3	; 0x03
 8be:	48 17       	cp	r20, r24
 8c0:	59 07       	cpc	r21, r25
 8c2:	c8 f0       	brcs	.+50     	; 0x8f6 <malloc+0x66>
 8c4:	84 17       	cp	r24, r20
 8c6:	95 07       	cpc	r25, r21
 8c8:	69 f4       	brne	.+26     	; 0x8e4 <malloc+0x54>
 8ca:	10 97       	sbiw	r26, 0x00	; 0
 8cc:	31 f0       	breq	.+12     	; 0x8da <malloc+0x4a>
 8ce:	12 96       	adiw	r26, 0x02	; 2
 8d0:	0c 93       	st	X, r16
 8d2:	12 97       	sbiw	r26, 0x02	; 2
 8d4:	13 96       	adiw	r26, 0x03	; 3
 8d6:	1c 93       	st	X, r17
 8d8:	27 c0       	rjmp	.+78     	; 0x928 <__stack+0x29>
 8da:	00 93 c8 01 	sts	0x01C8, r16	; 0x8001c8 <__flp>
 8de:	10 93 c9 01 	sts	0x01C9, r17	; 0x8001c9 <__flp+0x1>
 8e2:	22 c0       	rjmp	.+68     	; 0x928 <__stack+0x29>
 8e4:	21 15       	cp	r18, r1
 8e6:	31 05       	cpc	r19, r1
 8e8:	19 f0       	breq	.+6      	; 0x8f0 <malloc+0x60>
 8ea:	42 17       	cp	r20, r18
 8ec:	53 07       	cpc	r21, r19
 8ee:	18 f4       	brcc	.+6      	; 0x8f6 <malloc+0x66>
 8f0:	9a 01       	movw	r18, r20
 8f2:	bd 01       	movw	r22, r26
 8f4:	ef 01       	movw	r28, r30
 8f6:	df 01       	movw	r26, r30
 8f8:	f8 01       	movw	r30, r16
 8fa:	db cf       	rjmp	.-74     	; 0x8b2 <malloc+0x22>
 8fc:	21 15       	cp	r18, r1
 8fe:	31 05       	cpc	r19, r1
 900:	f9 f0       	breq	.+62     	; 0x940 <__stack+0x41>
 902:	28 1b       	sub	r18, r24
 904:	39 0b       	sbc	r19, r25
 906:	24 30       	cpi	r18, 0x04	; 4
 908:	31 05       	cpc	r19, r1
 90a:	80 f4       	brcc	.+32     	; 0x92c <__stack+0x2d>
 90c:	8a 81       	ldd	r24, Y+2	; 0x02
 90e:	9b 81       	ldd	r25, Y+3	; 0x03
 910:	61 15       	cp	r22, r1
 912:	71 05       	cpc	r23, r1
 914:	21 f0       	breq	.+8      	; 0x91e <__stack+0x1f>
 916:	fb 01       	movw	r30, r22
 918:	93 83       	std	Z+3, r25	; 0x03
 91a:	82 83       	std	Z+2, r24	; 0x02
 91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
 91e:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <__flp+0x1>
 922:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__flp>
 926:	fe 01       	movw	r30, r28
 928:	32 96       	adiw	r30, 0x02	; 2
 92a:	44 c0       	rjmp	.+136    	; 0x9b4 <__stack+0xb5>
 92c:	fe 01       	movw	r30, r28
 92e:	e2 0f       	add	r30, r18
 930:	f3 1f       	adc	r31, r19
 932:	81 93       	st	Z+, r24
 934:	91 93       	st	Z+, r25
 936:	22 50       	subi	r18, 0x02	; 2
 938:	31 09       	sbc	r19, r1
 93a:	39 83       	std	Y+1, r19	; 0x01
 93c:	28 83       	st	Y, r18
 93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__stack+0xb5>
 940:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <__data_end>
 944:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <__data_end+0x1>
 948:	23 2b       	or	r18, r19
 94a:	41 f4       	brne	.+16     	; 0x95c <__stack+0x5d>
 94c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 950:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 954:	30 93 c7 01 	sts	0x01C7, r19	; 0x8001c7 <__data_end+0x1>
 958:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <__data_end>
 95c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 960:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 964:	21 15       	cp	r18, r1
 966:	31 05       	cpc	r19, r1
 968:	41 f4       	brne	.+16     	; 0x97a <__stack+0x7b>
 96a:	2d b7       	in	r18, 0x3d	; 61
 96c:	3e b7       	in	r19, 0x3e	; 62
 96e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 972:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 976:	24 1b       	sub	r18, r20
 978:	35 0b       	sbc	r19, r21
 97a:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <__data_end>
 97e:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <__data_end+0x1>
 982:	e2 17       	cp	r30, r18
 984:	f3 07       	cpc	r31, r19
 986:	a0 f4       	brcc	.+40     	; 0x9b0 <__stack+0xb1>
 988:	2e 1b       	sub	r18, r30
 98a:	3f 0b       	sbc	r19, r31
 98c:	28 17       	cp	r18, r24
 98e:	39 07       	cpc	r19, r25
 990:	78 f0       	brcs	.+30     	; 0x9b0 <__stack+0xb1>
 992:	ac 01       	movw	r20, r24
 994:	4e 5f       	subi	r20, 0xFE	; 254
 996:	5f 4f       	sbci	r21, 0xFF	; 255
 998:	24 17       	cp	r18, r20
 99a:	35 07       	cpc	r19, r21
 99c:	48 f0       	brcs	.+18     	; 0x9b0 <__stack+0xb1>
 99e:	4e 0f       	add	r20, r30
 9a0:	5f 1f       	adc	r21, r31
 9a2:	50 93 c7 01 	sts	0x01C7, r21	; 0x8001c7 <__data_end+0x1>
 9a6:	40 93 c6 01 	sts	0x01C6, r20	; 0x8001c6 <__data_end>
 9aa:	81 93       	st	Z+, r24
 9ac:	91 93       	st	Z+, r25
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	e0 e0       	ldi	r30, 0x00	; 0
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	cf 01       	movw	r24, r30
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	1f 91       	pop	r17
 9bc:	0f 91       	pop	r16
 9be:	08 95       	ret

000009c0 <free>:
 9c0:	cf 93       	push	r28
 9c2:	df 93       	push	r29
 9c4:	00 97       	sbiw	r24, 0x00	; 0
 9c6:	09 f4       	brne	.+2      	; 0x9ca <free+0xa>
 9c8:	81 c0       	rjmp	.+258    	; 0xacc <free+0x10c>
 9ca:	fc 01       	movw	r30, r24
 9cc:	32 97       	sbiw	r30, 0x02	; 2
 9ce:	13 82       	std	Z+3, r1	; 0x03
 9d0:	12 82       	std	Z+2, r1	; 0x02
 9d2:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <__flp>
 9d6:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <__flp+0x1>
 9da:	10 97       	sbiw	r26, 0x00	; 0
 9dc:	81 f4       	brne	.+32     	; 0x9fe <free+0x3e>
 9de:	20 81       	ld	r18, Z
 9e0:	31 81       	ldd	r19, Z+1	; 0x01
 9e2:	82 0f       	add	r24, r18
 9e4:	93 1f       	adc	r25, r19
 9e6:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <__data_end>
 9ea:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <__data_end+0x1>
 9ee:	28 17       	cp	r18, r24
 9f0:	39 07       	cpc	r19, r25
 9f2:	51 f5       	brne	.+84     	; 0xa48 <free+0x88>
 9f4:	f0 93 c7 01 	sts	0x01C7, r31	; 0x8001c7 <__data_end+0x1>
 9f8:	e0 93 c6 01 	sts	0x01C6, r30	; 0x8001c6 <__data_end>
 9fc:	67 c0       	rjmp	.+206    	; 0xacc <free+0x10c>
 9fe:	ed 01       	movw	r28, r26
 a00:	20 e0       	ldi	r18, 0x00	; 0
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	ce 17       	cp	r28, r30
 a06:	df 07       	cpc	r29, r31
 a08:	40 f4       	brcc	.+16     	; 0xa1a <free+0x5a>
 a0a:	4a 81       	ldd	r20, Y+2	; 0x02
 a0c:	5b 81       	ldd	r21, Y+3	; 0x03
 a0e:	9e 01       	movw	r18, r28
 a10:	41 15       	cp	r20, r1
 a12:	51 05       	cpc	r21, r1
 a14:	f1 f0       	breq	.+60     	; 0xa52 <free+0x92>
 a16:	ea 01       	movw	r28, r20
 a18:	f5 cf       	rjmp	.-22     	; 0xa04 <free+0x44>
 a1a:	d3 83       	std	Z+3, r29	; 0x03
 a1c:	c2 83       	std	Z+2, r28	; 0x02
 a1e:	40 81       	ld	r20, Z
 a20:	51 81       	ldd	r21, Z+1	; 0x01
 a22:	84 0f       	add	r24, r20
 a24:	95 1f       	adc	r25, r21
 a26:	c8 17       	cp	r28, r24
 a28:	d9 07       	cpc	r29, r25
 a2a:	59 f4       	brne	.+22     	; 0xa42 <free+0x82>
 a2c:	88 81       	ld	r24, Y
 a2e:	99 81       	ldd	r25, Y+1	; 0x01
 a30:	84 0f       	add	r24, r20
 a32:	95 1f       	adc	r25, r21
 a34:	02 96       	adiw	r24, 0x02	; 2
 a36:	91 83       	std	Z+1, r25	; 0x01
 a38:	80 83       	st	Z, r24
 a3a:	8a 81       	ldd	r24, Y+2	; 0x02
 a3c:	9b 81       	ldd	r25, Y+3	; 0x03
 a3e:	93 83       	std	Z+3, r25	; 0x03
 a40:	82 83       	std	Z+2, r24	; 0x02
 a42:	21 15       	cp	r18, r1
 a44:	31 05       	cpc	r19, r1
 a46:	29 f4       	brne	.+10     	; 0xa52 <free+0x92>
 a48:	f0 93 c9 01 	sts	0x01C9, r31	; 0x8001c9 <__flp+0x1>
 a4c:	e0 93 c8 01 	sts	0x01C8, r30	; 0x8001c8 <__flp>
 a50:	3d c0       	rjmp	.+122    	; 0xacc <free+0x10c>
 a52:	e9 01       	movw	r28, r18
 a54:	fb 83       	std	Y+3, r31	; 0x03
 a56:	ea 83       	std	Y+2, r30	; 0x02
 a58:	49 91       	ld	r20, Y+
 a5a:	59 91       	ld	r21, Y+
 a5c:	c4 0f       	add	r28, r20
 a5e:	d5 1f       	adc	r29, r21
 a60:	ec 17       	cp	r30, r28
 a62:	fd 07       	cpc	r31, r29
 a64:	61 f4       	brne	.+24     	; 0xa7e <free+0xbe>
 a66:	80 81       	ld	r24, Z
 a68:	91 81       	ldd	r25, Z+1	; 0x01
 a6a:	84 0f       	add	r24, r20
 a6c:	95 1f       	adc	r25, r21
 a6e:	02 96       	adiw	r24, 0x02	; 2
 a70:	e9 01       	movw	r28, r18
 a72:	99 83       	std	Y+1, r25	; 0x01
 a74:	88 83       	st	Y, r24
 a76:	82 81       	ldd	r24, Z+2	; 0x02
 a78:	93 81       	ldd	r25, Z+3	; 0x03
 a7a:	9b 83       	std	Y+3, r25	; 0x03
 a7c:	8a 83       	std	Y+2, r24	; 0x02
 a7e:	e0 e0       	ldi	r30, 0x00	; 0
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	12 96       	adiw	r26, 0x02	; 2
 a84:	8d 91       	ld	r24, X+
 a86:	9c 91       	ld	r25, X
 a88:	13 97       	sbiw	r26, 0x03	; 3
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	19 f0       	breq	.+6      	; 0xa94 <free+0xd4>
 a8e:	fd 01       	movw	r30, r26
 a90:	dc 01       	movw	r26, r24
 a92:	f7 cf       	rjmp	.-18     	; 0xa82 <free+0xc2>
 a94:	8d 91       	ld	r24, X+
 a96:	9c 91       	ld	r25, X
 a98:	11 97       	sbiw	r26, 0x01	; 1
 a9a:	9d 01       	movw	r18, r26
 a9c:	2e 5f       	subi	r18, 0xFE	; 254
 a9e:	3f 4f       	sbci	r19, 0xFF	; 255
 aa0:	82 0f       	add	r24, r18
 aa2:	93 1f       	adc	r25, r19
 aa4:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <__data_end>
 aa8:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <__data_end+0x1>
 aac:	28 17       	cp	r18, r24
 aae:	39 07       	cpc	r19, r25
 ab0:	69 f4       	brne	.+26     	; 0xacc <free+0x10c>
 ab2:	30 97       	sbiw	r30, 0x00	; 0
 ab4:	29 f4       	brne	.+10     	; 0xac0 <free+0x100>
 ab6:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <__flp+0x1>
 aba:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <__flp>
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <free+0x104>
 ac0:	13 82       	std	Z+3, r1	; 0x03
 ac2:	12 82       	std	Z+2, r1	; 0x02
 ac4:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <__data_end+0x1>
 ac8:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <__data_end>
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	08 95       	ret

00000ad2 <_exit>:
 ad2:	f8 94       	cli

00000ad4 <__stop_program>:
 ad4:	ff cf       	rjmp	.-2      	; 0xad4 <__stop_program>
